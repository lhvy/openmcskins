import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.2.1'
        classpath 'com.guardsquare:proguard-base:7.2.1'
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url = 'https://repo.viaversion.com/'
    }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.4'
}

// Using remote repo as mod site if project.mod_url is missing

def url

if (project.hasProperty("mod_url")) url = project.mod_url else {
    final process = 'git ls-remote --get-url'.execute()
    process.waitFor()
    url = process.text.trim()
}

// Format fabric.mod.json

processResources {
    inputs.properties "version": project.version,
            "mod_name": project.mod_name,
            "mod_url": url

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "mod_name": project.mod_name,
                "mod_url": url
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

final String VERSION_AND_NAME = "${project.archivesBaseName}-${project.version}"

// Create shadow jar, because ReactiveX and SnakeYAML

project.configurations.implementation.setCanBeResolved(true)

shadowJar {
    configurations = [project.configurations.implementation]
    archiveClassifier.set("dev-shadow")

    minimize()
}

remapJar {
    dependsOn(shadowJar)

    inputFile.set(shadowJar.archiveFile)
}

// Optimize using ProGuard because 3MB is too much

task proguard(type: ProGuardTask) {
    dependsOn(remapJar)

    configuration "${projectDir}/optimize.pro"
    injars "${buildDir}/libs/${VERSION_AND_NAME}.jar"
    outjars "${buildDir}/libs/${VERSION_AND_NAME}-optimized.jar"
    libraryjars(project.configurations.modImplementation.files)
}